# -*- coding: utf-8 -*-
"""Exercícios Comunidade DS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ndcSR-6yxpu6pErnJ1-e20Xmx4ZaUb15

# Exercícios iniciais (Fundamentos da Programação)

Ciclo 1 - Operações Matemática com variáveis & condicionais

1. Some o valor 10 com 30 e exiba na tela.
"""

10 + 30

A = 10+30
print(A)

"""2. Some os seguintes números: 10, 300, 0.4, 10."""

10+300+0.4+10

B = 10+300+0.4+10
print(B)

"""3. Desenvolva comandos em Python capaz de calcular a média harmônica entre 5 números. Por exemplo: 2, 3, 5, 6 e 9"""

5 / ( 1/2 + 1/3 + 1/5 + 1/6 + 1/9 )

##  Opção maleavel
n = 5
x1 = 2
x2 = 3
x3 = 5
x4 = 6
x5 = 9

n / ( 1/x1 + 1/x2 + 1/x3 + 1/x4 + 1/x5 )

"""4. Um Cientista de Dados Jr precisa criar sequência de comandos que seja capaz de calcular a média ponderada dos valores digitados pelo usuário. O usuário é capaz de digitar 8 valores.

O primeiro número tem peso 0.5 ,o segundo 1.0, o terceiro 1.5 até o último valor que tem peso 4, ou seja, os pesos são acrescidos de 0.5 para cada valor.

Portanto, o algoritmo deve ser capaz de calcular a média ponderada dos oito valores digitados pelo usuário, cada valor com o seu respectivo peso
"""

## Fórmula Média Ponderada = [(N1 x P1) + (N2 x P2) + (N3 x P3) ÷ (P1 + P2 + P3)
n1 = int (input( "Digite o primeiro valor " ))
n2 = int (input( "Digite o segundo valor " ))

peso1 = 1
peso2 = 2

((n1 * peso1) + (n2 * peso2)) / (peso1 * peso2)

n1 = int (input( "Digite o primeiro valor " ))
n2 = int (input( "Digite o segundo valor " ))
n3 = int (input( "Digite o terceiro valor " ))
n4 = int (input( "Digite o quarto valor " ))
n5 = int (input( "Digite o quinto valor " ))
n6 = int (input( "Digite o sexto valor " ))
n7 = int (input( "Digite o sétimo valor " ))
n8 = int (input( "Digite o oitavo valor " ))

peso1 = 0.5
peso2 = 1.0
peso3 = 1.5
peso4 = 2.0
peso5 = 2.5
peso6 = 3.0
peso7 = 3.5
peso8 = 4.0

((n1 * peso1) + (n2 * peso2) + (n3 * peso3) + (n4 * peso4) + (n5 * peso5) + (n6 * peso6) + (n7 * peso7) + (n8 * peso8)) / (peso1 * peso2 * peso3 * peso4 * peso5 * peso7 * peso8)

"""5. Um programador Jr precisa construir uma mini calculadora. Essa calculadora segue os seguintes padrões:

  a) Se o usuário digitar um valor menor ou igual a 5, a calculadora vai multiplicar esse valor por 10 e retornar o valor resultantes para o usuário;

  b) Se o usuário digitar um número entre 6 e 10, a calculadora multiplica por 20 o número digitado pelo usuário;

  c) Se o usuário digitar um valor maior ou igual a 11, a calculadora soma 100 ao número digitado. Ajude o programador Jr a construir essa calculadora, fornecendo os comandos em Python para ele.
"""

num = 2

if num <= 5 *20:
  resultado = num * 10

elif num <= 10:
  resultado = num * 20

else:
  resultado = num * 100

"""6. Um programador Jr precisa criar um algoritmo que consiga fazer a comparação entre três valores e exibir qual é o maior e qual é o menor valor digitado. Ajude o programador desenvolvendo o código em Python."""

num1 = 8
num2 = 4
num3 = 12

maior = num1

if num2 > maior:
  maior = num2

if num3 > maior:
  maior = num3

menor = num1

if num2 < menor:
  menor = num2

if num3 < menor:
  menor = num3

print('O maior valor é: {}'.format(maior))
print('O menor valor é: {}'.format(menor))

"""# As perguntas do CEO

## Ciclo 1 - Exploração dos Dados
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt # ou from matplotlib import pyplot as plt
import plotly.express as px # plotly é uma biblioteca que cria gráficos interativos
import folium

data = pd.read_csv( '/content/AB_NYC_2019.csv' )

data.head() ### esse comando mostra as 5 primeiras linhas do conjunto de dados.
##Comando head faz parte da estrutura de dados Dataframe

"""1. Qual o valor médio do aluguel na cidade de Nova York?

   R.: Valor médio do aluguel 152.7206871868289
"""

preco_aluguel = data.loc [:, 'price'] #esse comando localiza as linhas e colunas, p/ mostrar tds as linhas coloque
#apenas ":", para filtrar coloque o número da linha ex.: "10:20" em seguida o nome da coluna

np.mean(preco_aluguel) #no código anterior criei a variavél preço, assim é possível usar o
#comando mean da biblioteca Numpy e calcular a média de preços do aluguel.

"""2. Quais os nomes das regiões que existem na cidade de Nova York?

 R.: Brooklyn, Manhattan, Queens, Staten Island e Bronx
"""

#1º Passo: contar todos os nomes que aparecem na coluna região
#2º Passo: mostrar apenas os nomes únicos
regiao = data.loc[:, 'neighbourhood_group'] #novamente comando loc p/ localizar a coluna desejada
pd.unique (regiao) #comando "unique" da biblioteca pandas, mostra os valores únicos

"""3. Qual o valor do aluguel diário mais caro da cidade de Nova York?

  R.: Valor máximo US 10.000
"""

np.max (preco_aluguel) #usei a mesma variavel, comando "max" biblioteca Numpy

"""## Ciclo 2 - Estatística e análise

Quais são as categorias de imóveis que estão cadastradas dentro da
base de dados da cidade de Nova York?
  
  R.: Entire home/apt, Private room, Shared room  - 3 Nomes distintos
"""

tipos_de_imoveis = data.loc[:, 'room_type']
np.unique (tipos_de_imoveis)

"""2. Quantos usuários (Hosts) únicos cadastrados existem dentro da base de dados da cidade de Nova York?

  R.: 37457 usuários únicos
"""

usuarios_cadastrados = data.loc[:, 'host_id']
usuarios_cadastrados_unicos = pd.unique (usuarios_cadastrados)

len(usuarios_cadastrados_unicos) #comando "len" está no proprio Python, faz a contagem do itens

"""3. Como é a variação dos preços dos imóveis em NY? (Calcular o desvio padrão em trono da média de preços dos imóveis.)

  R.: A variação média dos preços dos imóveis em NY é de US 152.72 e o desvio padrão de US 240.15
"""

# comandos da biblioteca Numpy

print (' A média é: US {:.2f}'.format (np.mean (preco_aluguel))) #calcula a média
print (' O desvio padrão é: US {:.2f}'.format (np.std (preco_aluguel))) #calcula o desvio padrão
print (' A mediana é: US {:.2f}'.format (np.median (preco_aluguel)))

"""4. Existem mais imóveis baratos ou caros?

  R.: Existem mais imóveis baratos.
  
  Cerca de 48.700 imóveis até US 1.200, sendo:
  
  - aproximadamente 5.000 imóveis com valores entre US 0 e US 50;
  
  - cerca de 16.500 imóveis com valores entre US 50 e US 100;
  
  - quase 10.000 imóveis com valores entre US 100 e US 150;
  
  - cerca de 7.000 imóveis com valores entre US 150 e US 200.
  
  São 48895 imóveis em NY, quase 40.000 imóveis até US 200. Veja no histograma abaixo.
"""

print ('O preco mínimo é: US {}'.format (np.min (preco_aluguel)))
print ('O preco maximo é: US {}'.format (np.max (preco_aluguel)))

len(preco_aluguel)

linhas = data.loc[:, 'price'] < 1200
preco_aluguel = data.loc[linhas, 'price']

plt.hist(preco_aluguel, bins=24); #comando "hist" biblioteca matplotlib apelidada de plt, retorna um histograma
#(valor final) - (valor inicial) / pelo valor que desejo em cada bin 1200 - 0 / 50 = 24, assim terei 24 bins com 50 itens

linhas = data.loc[:, 'price'] > 1200
preco_aluguel = data.loc[linhas, 'price']

plt.hist(preco_aluguel, bins=1);

"""5. Qual a distribuição do número de Reviews? Existem imóveis com muitos e outro com poucos reviews?

 R.: Quase 60% (30.000 imóveis) possuem 10 reviews ou menos.

 Enquanto cerca de 7% (3.000 imóveis) possuem 100 reviews ou mais. Veja no histograma abaixo.
"""

linhas = data.loc[:, 'number_of_reviews'] < 350
number_of_reviews = data.loc[linhas, 'number_of_reviews']

plt.hist(number_of_reviews, bins=35);

linhas = data.loc[:, 'number_of_reviews'] > 99
number_of_reviews = data.loc[linhas, 'number_of_reviews']

plt.hist(number_of_reviews, bins=1);

"""## Ciclo 3 - Análise Descritiva"""

data.head()

"""1. Qual é o intervalo de variação do preço dos alugueis dos imóveis?

"""

colunas = 'price'

desvio_padrao = np.std( data.loc[:, colunas])
print (desvio_padrao)

price = data.loc[:, 'price']
np.mean(price)

"""2. Qual a distribuição dos imóveis de acordo com o número mínimo de pernoites que podem ser agendado?

  Quase 40.000 imóveis exigem mínimo de 7 pernoites, sendo cerca de 32.000 imóveis com mínimo de 1 a 3 pernoites.

  Não há quantidades significativas de mínimo de pernoites de 7 a 20 dias, porém há cerca de 5.000 imóveis que exigem entre 28 e 30 pernoites.

"""

linhas = data.loc[:, 'minimum_nights'] < 7
mínimo_de_pernoites = data.loc[linhas, 'minimum_nights']

plt.hist(mínimo_de_pernoites, bins=7);

linhas = data.loc[:, 'minimum_nights'] < 31
mínimo_de_pernoites = data.loc[linhas, 'minimum_nights']

plt.hist(mínimo_de_pernoites, bins=31);

"""3. Qual a média e a mediana de imóveis cadastrado por host (dono do imóvel)?"""

calculated_host_listings_count = data.loc[:, 'calculated_host_listings_count']
print ( 'A média de imóveis cadastrados por host são {:.2f}'.format (np.mean (calculated_host_listings_count)))
print ( 'A médina de imóveis cadastrados por host são {}'.format (np.median (calculated_host_listings_count)))
print ( 'O máximo de imóveis cadastrados por host são {}'.format (np.max (calculated_host_listings_count)))
print ( 'A média de imóveis cadastrados por host são {}'.format (np.min (calculated_host_listings_count)))

"""4. Como você interpretaria o seguinte histograma?

  R.: A maioria dos imóveis tem pouquíssima avaliação. Mais de 20.000 imóveis (quase 50% dos imóveis em NY) sem nenhuma avaliação, e cerca de 5.000 imóveis com apenas 1 avaliação.
"""

linhas = data.loc[:, 'reviews_per_month'] < 10
reviews_per_month = data.loc[linhas, 'reviews_per_month']

plt.hist(reviews_per_month, bins=10);

"""5. Como os imóveis estão distribuídos pelos donos (host)?

  R.: Aproximadamente 40.000
"""

linhas = data.loc[:, 'calculated_host_listings_count'] < 30
calculated_host_listings_count = data.loc[linhas, 'calculated_host_listings_count']


plt.hist(calculated_host_listings_count, bins=30);

"""6. Qual a data mais recente da última avaliação?

  R.: A data mais recente das avaliação é 2018-10-19
"""

colunas = 'last_review'
last_review = data.loc [:, 'last_review'].sort_values(ascending=True)
data_recente = last_review.loc[13]
print( 'A data mais recente das avaliação é {}'. format (data_recente))

"""7. Qual o valor máximo de pernoites agendadas?
  
  R.: O valor máximo de pernoites agendadas são 1250 pernoites.
"""

max_pernoites = data.loc[:, 'minimum_nights']
np.max (max_pernoites)

"""8. Como você interpretaria o seguinte valor do desvio padrão?
(Preço médio da concorrência é de US 180 +/- US 20).

  R.: A média de preços da conconrrência está entre US 180.00 + US 20.00 (US 200.00) e US 180.00 - US 20.00 ( US 160.00). Tem imóveis mais caros ou mais baratos, mas a maioria estão dentro deste intervalo, de US 160.00 a US 200.00

9. Quantos nomes de donos de imóveis são únicos?

  R.: 12384
"""

host_name = data.loc[:, 'host_name']

host_name_unicos = pd.unique (host_name)

len (host_name_unicos)

"""10. Como você interpretaria o seguinte histograma?

  R.: Cerca de 18.000 imóveis estão localizados entre as latitudes 40.6875 e 40.7375
"""

colunas = 'latitude'
data_plot = data.loc[:, colunas]

plt.hist( data_plot, bins=16 );
plt.title( 'Posição geográfica dos imóveis' )
plt.xlabel( 'Valor da Latitude' );
plt.ylabel( 'Quantidade de imóveis' );

data.head(1)

"""##Ciclo 4 - Agrupamentos (Gráficos interativos)"""

#Como os dados estão agrupados por uma coluna, é possível aplicar operações aritimética sobre o grupo selecionado.
#1. Quantidade de proprietários por região:
#seleção de colunas
colunas = ['host_id', 'neighbourhood_group']
colunas_groupby = ['neighbourhood_group'] #coluna que desejo agrupar

#aplicação de uma operação aritmética
data.loc[:, colunas].groupby(colunas_groupby).count() #'loc' seleciona as colunas de interesse, e pertence a "data"
#'groupby' p/ agrupar, 'count' faz a operação matemática outra opçao

data.loc[:, ['host_id', 'neighbourhood_group']].groupby(['neighbourhood_group']).count()

data.loc[:, colunas].groupby(colunas_groupby).nunique()
#comando 'nunique' mostra apenas os host_id únicos

#2. Preço médio do aluguel por região:
data.loc[:, ['price', 'neighbourhood_group']].groupby(['neighbourhood_group']).mean()

#3. Número de avaliações média por tipo de quarto.
data.loc[:, ['number_of_reviews', 'room_type']].groupby(['room_type']).mean()

#4. Desvio Padrão do preço do aluguel por região e tipo de quarto.
data.loc[:, ['price','neighbourhood_group', 'room_type']].groupby(['neighbourhood_group', 'room_type']).std()

"""1. Qual é o valor do aluguel (diária) mais caro de cada região da base de dados da cidade de Nova York, apenas para os imóveis disponíveis para alugar?"""

data.loc[:, ['price','neighbourhood_group', 'availability_365']].groupby(['neighbourhood_group']).max().reset_index()

px.bar(data_plot, x='neighbourhood_group', y='price')

"""2. Conseguimos saber onde estão localizados os imóveis com o valor do
aluguel mais caro, na cidade de Nova York, apenas para os imóveis
disponíveis para alugar?
"""

data_plot = data.loc[:, ['price', 'neighbourhood_group', 'availability_365', 'latitude', 'longitude']].groupby(['neighbourhood_group']).max().reset_index()

for variavel in lista #pode ser uma lista c/ números, números e textos, apenas textos, planilha de dados
  valor = variavel +10
  print (valor)

  for a in [0, 1, 20, 30, 40]
  valor a + 10
  print(valor)

Obs.:Opção para inserir o comando 'for'

data_plot

colunas = ['price', 'neighbourhood_group', 'availability_365', 'latitude', 'longitude']
colunas_groupby = ['neighbourhood_group', 'availability_365'] #coluna que desejo agrupar

data_plot = data.loc[:, colunas].groupby(colunas_groupby)

f = folium.Figure (width=1024, height=768)

map = folium.Map( # M precisa ser maiúsculo
      location=[data_plot['latitude'].mean(),
                data_plot['longitude'].mean()],
      zoom_start=14,
      control_scale=True #coloca o sinal de + e - no mapa
)

for index, location_info in data_plot.iterrows():
  folium.Marker( [location_info['latitude'],
                  location_info['longitude']]).add_to(map)

map

"""Obs questão 2: o 'iterrows' pega tds as colunas e as tranforma em lista assim é possível o 'lop for' percorrer sem ter que inserir linha por linha

index é a variavel p percorrer a lista, location_info é uma variavel já vem pronta, ela tem informações sobre os dados #inserir os pontos de localização no mapa

Marker é o que coloca os pinos de localização no mapa

3. Conseguimos saber onde estão localizados os imóveis pelo seu tipo, apenas para os imóveis disponíveis para alugar?
"""

colunas = ['room_type', 'neighbourhood_group', 'availability_365', 'latitude', 'longitude']
colunas_groupby = ['neighbourhood_group', 'latitude', 'longitude'] #coluna que desejo agrupar

data_plot = data.loc[:, colunas].sample(100)

#criar a coluna 'color' p/ diferenciar os pinos por cor, NA = não aplicável, apenas para ter um valor vazio
#em seguida substituímos o NA pelas cores:
data_plot.loc[:, 'color'] = 'NA'

#selecionar apenas as linhas dos imóveis 'Private room', e definir sua cor
linhas_Private_room = data_plot.loc[:, 'room_type'] == 'Private room' # dois símbolos '==' fazem a atribuição
data_plot.loc[linhas_Private_room, 'color'] = 'darkgreen'

#selecionar apenas o imóveis 'Entire home/apt', e definir sua cor
linhas_Entire_apt = data_plot.loc[:, 'room_type'] == 'Entire home/apt'
data_plot.loc[linhas_Entire_apt, 'color'] = 'darkred'

#selecionar apenas o imóveis 'Shared romm', e definir sua cor
linhas_Shared_romm = data_plot.loc[:, 'room_type'] == 'Shared romm'
data_plot.loc[linhas_Shared_romm, 'color'] = 'purple'

map = folium.Map() #sem tamanho específico, o defaut esse é o comando que desenha o mapa

for index, location_info in data_plot.iterrows():
  folium.Marker(
      [location_info['latitude'], location_info['longitude']],
      popup=location_info['neighbourhood_group'],
      icon=folium.Icon(color=location_info ['color'])
    ).add_to(map)

map

"""## Ciclo 5 - Biblioteca Folium e Mapas interativos

1. Qual a média de preço por região?
"""

data_mean = data.loc[:, ['price', 'neighbourhood_group']].groupby('neighbourhood_group').mean().reset_index()

data_mean

"""2. Qual o maior valor do aluguel por bairro e por tipo de quarto?"""

data.loc[:, ['price', 'room_type', 'neighbourhood']].groupby(['neighbourhood', 'room_type']).max().reset_index()

"""3. Qual o menor valor de latitude por região?


"""

data.loc[:, ['latitude', 'neighbourhood_group']].groupby('neighbourhood_group').min().reset_index()

"""4. Faça um histograma somente com os proprietários que possuem mais de um imóvel listado na base de dados de NY."""

data.plot = data.loc[:,['host_id', 'calculated_host_listings_count']].groupby('calculated_host_listings_count')
linhas = data.loc[:, 'calculated_host_listings_count']>1
data_plot = data.loc[linhas, 'calculated_host_listings_count']
plt.hist(data_plot, bins=35);
plt.title ('A distribuição de imóveis cadastrados' );
plt.xlabel( 'Quantidade de imóveis cadastrados');
plt.ylabel('Quantidade de proprietários');

"""5. Desenhe um mapa com os imóveis mais baratos por região."""

#data.plot = data.loc[:, ['price', 'neighbourhood_group', 'latitude', 'longitude']].groupby('neighbourhood_group').min().reset_index
colunas = ['price', 'neighbourhood_group', 'latitude', 'longitude']
colunas_groupby = 'neighbourhood_group'
data_plot = data.loc[:, colunas].groupby (colunas_groupby).sample(100)
map = folium.Map()

for index, location_info in data_plot.iterrows():
  folium.Marker( [location_info ['latitude'],
                  location_info ['longitude']],
                  popup=location_info [['neighbourhood_group', 'price']]
                ).add_to(map)

map

"""6. Desenhe um mapa com os imóveis que possuem o maior número de avaliações por região."""

data_plot = data.loc[:, ['reviews_per_month', 'neighbourhood_group', 'latitude', 'longitude']].groupby('neighbourhood_group').max().reset_index()

map = folium.Map()

for index, location_info in data_plot.iterrows():
  folium.Marker( [location_info ['latitude'],
                  location_info ['longitude']],
                  popup=location_info [['neighbourhood_group', 'reviews_per_month']]
                ).add_to(map)

map

"""7. Desenhe um mapa somente com 100 imóveis do tipo “private room” escolhidos aleatoriamente."""

colunas = ['room_type', 'neighbourhood_group', 'latitude', 'longitude']
linhas = data.loc[:, 'room_type'] == 'Private room'

data_plot = data.loc[:, colunas].sample(100)

map = folium.Map() #sem tamanho específico, o default esse é o comando que desenha o mapa

for index, location_info in data_plot.iterrows():
  folium.Marker(
      [location_info['latitude'], location_info['longitude']],
      popup=location_info['room_type'],
    ).add_to(map)

map

"""8. Desenhe um mapa somente com 100 imóveis do tipo “shared room” escolhidos aleatoriamente."""

colunas = ['room_type', 'neighbourhood_group', 'latitude', 'longitude']
linhas = data.loc[:, 'room_type'] == 'Shared room'

data_plot = data.loc[:, colunas].sample(100)

map = folium.Map() #sem tamanho específico, o default esse é o comando que desenha o mapa

for index, location_info in data_plot.iterrows():
  folium.Marker(
      [location_info['latitude'], location_info['longitude']],
      popup=location_info['room_type'],
    ).add_to(map)

map